name: Build and Release

# These permissions are needed for creating releases
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

on:
  push:
    branches: [ main ]
    paths:
      - 'main.py'
    tags:
      - 'v*'  # Only match version tags (v1.0.0, etc.)
  workflow_dispatch:

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Needed to get full git history for changelog
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Get version from SHA
      id: version
      run: echo "version=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # For manual runs, show recent commits
          CHANGES=$(git log --pretty=format:"- %s" -n 10)
        else
          # For tag pushes, show changes since last tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            # First release, show all commits
            CHANGES=$(git log --pretty=format:"- %s")
          else
            # Show changes since last tag
            CHANGES=$(git log --pretty=format:"- %s" $LATEST_TAG..HEAD)
          fi
        fi
        # Escape newlines for JSON
        CHANGES_ESCAPED=$(echo "$CHANGES" | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
        echo "changes<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Build executable
      run: |
        # Include the version in the build
        echo "BUILD_VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV
        
        # Create directory structure
        mkdir -p dist/Bartender
        
        # Build the executable
        pyinstaller --windowed --onefile --name Bartender \
          --add-data "Bartender.png:." \
          --distpath dist/Bartender \
          main.py
        
        # Copy additional files to the dist directory
        cp README.md dist/Bartender/
        cp Bartender.png dist/Bartender/
        
        # Create a simple launcher script
        echo '#!/bin/sh
        SCRIPT_DIR=$(cd -- "$(dirname -- "$0")" && pwd)
        cd "$SCRIPT_DIR"
        ./Bartender' > dist/Bartender/launch.sh
        
        # Make scripts executable
        chmod +x dist/Bartender/Bartender
        chmod +x dist/Bartender/launch.sh
        
        # Create a zip archive of the release
        cd dist
        zip -r Bartender-${{ steps.version.outputs.version }}-linux.zip Bartender
        cd ..
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Bartender ${{ steps.version.outputs.version }}
        body: |
          ### Changes
          ${{ steps.changelog.outputs.changes }}
          
          ### Installation
          1. Download the latest release
          2. Extract the zip file
          3. Run the launcher:
             ```bash
             chmod +x Bartender/launch.sh
             ./Bartender/launch.sh
             ```
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/Bartender-${{ steps.version.outputs.version }}-linux.zip
        asset_name: Bartender-${{ steps.version.outputs.version }}-linux.zip
        asset_content_type: application/zip
